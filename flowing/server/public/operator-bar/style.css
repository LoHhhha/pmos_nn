:root {
    --operator-bar-background-color: var(--container-background-color);
    --operator-bar-outline-color: var(--container-outline-color);
    --operator-bar-margin: var(--margin);

    --operator-bar-search-bar-background-color: var(--content-background-color);
    --operator-bar-search-svg-color: var(--default-color);

    --operator-bar-sep-svg-color: var(--default-color);
    --operator-bar-sep-border-color: var(--container-outline-color);
    --operator-bar-sep-hover-border-color: var(--default-color);

    --node-outline-color: var(--container-outline-color);
    --node-outline-font-size: var(--label-font-size);

    --node-selected-outline-color: var(--default-color);
    --node-hover-outline-color: var(--default-color);
    --node-selected-outline-width: calc(var(--border-width) * 2);
    --node-hover-outline-width: calc(var(--border-width) * 2);

    --node-end-point-overlays-label-color: var(--container-outline-color);
    --node-end-point-label-display: "inline";
    --node-end-point-label-font-size: var(--label-font-size);

    --node-overview-background-color: var(--container-background-color);
    --node-overview-width: 300px;
    --node-overview-container-max-height: 250px;
    --node-overview-margin: var(--margin);
    --node-overview-outline-color: var(--container-outline-color);
    --node-overview-item-input-background-color: var(
        --content-background-color
    );
    --node-overview-button-color: var(--default-color);
    --node-overview-button-outline-color: var(--content-outline-color);
    --node-overview-button-background-color: var(--lucency-reddish);
    --node-overview-button-hover-background-color: var(--lucency-red);
}

.node {
    outline: var(--border-width) solid var(--node-outline-color);
    flex-shrink: 0; /* make sure node will not be compressed */
    user-select: none; /* make sure node's text will not be selected */
    background-color: bisque;
    width: var(--node-width);
    height: var(--node-height);
    line-height: var(--node-height);
    text-align: center;
    border-radius: var(--radius);
    overflow: visible;
}

.node:hover {
    outline: var(--node-hover-outline-width) solid
        var(--node-hover-outline-color) !important;
}

.node-outline {
    font-size: var(--node-outline-font-size);
    text-align: left;
    position: absolute;
    left: 100%;
    margin-left: 10px;
    pointer-events: none;
    user-select: none;
    word-wrap: break-word;
    white-space: nowrap;
    color: var(--node-outline-color);
}

.node-endpoint-label {
    font-size: var(--node-end-point-label-font-size);
    text-align: center;
    position: absolute;
    pointer-events: none;
    user-select: none;
    word-wrap: break-word;
    white-space: nowrap;
    color: var(--node-end-point-overlays-label-color);
}

.operator-bar {
    touch-action: pan-y;
    position: absolute;
    backdrop-filter: var(--blur);
    background-color: var(--operator-bar-background-color);
    outline: var(--border-width) solid var(--operator-bar-outline-color);
    height: 100%;
    width: auto;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    overflow-y: auto;
    padding: 10px;
    gap: 10px;
    border-radius: var(--radius);
    user-select: none;
}

.operator-bar-svg * {
    fill: var(--operator-bar-sep-svg-color);
}

.operator-bar-sep {
    display: grid;
    align-items: center;
    justify-content: center;
    grid-template-columns: 8fr 2fr;
    border-bottom: var(--border-width) solid
        var(--operator-bar-sep-border-color);
    width: 100%;
    padding-top: calc(var(--border-width));
    padding-bottom: calc(var(--border-width));
}

.operator-bar-sep:hover {
    border-color: var(--operator-bar-sep-hover-border-color);
    border-width: calc(2 * var(--border-width));
    padding-bottom: 0;
}

.operator-bar-sep-title {
    text-align: left;
}

.operator-bar-sep-switch {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    align-items: end;
}

/* inherit node */
.operator-bar-search-bar {
    display: grid;
    grid-template-columns: 2fr 6fr 2fr;
    backdrop-filter: var(--blur);
    background-color: var(--operator-bar-search-bar-background-color);
}

.operator-bar-search-input {
    border-radius: var(--radius);
    border: none;
    outline: none;
    background-color: rgba(0, 0, 0, 0);
    width: 100%;
    margin: 0 auto;
}

.operator-bar-search-icon {
    display: flex;
    align-items: center;
    justify-content: center;
}

.overview {
    outline: var(--border-width) solid var(--node-overview-outline-color);
    background-color: var(--node-overview-background-color);
    backdrop-filter: var(--blur);
    width: var(--node-overview-width);
    height: auto;
    position: absolute;
    display: flex;
    flex-direction: column;
    line-height: var(--node-height);
    border-radius: var(--radius);
}

.overview-args-container {
    max-height: var(--node-overview-container-max-height);
    overflow: auto;
    display: flex;
    flex-direction: column;
    margin: 5px 10px 5px 10px;
    flex: 1;
}

.overview-title {
    text-align: center;
    margin: 5px 10px 5px 10px;
    font-size: large;
    font-weight: bold;
    user-select: none;
}

.overview-id {
    text-align: center;
    user-select: none;
}

.overview-item {
    display: grid;
    grid-template-columns: auto;
    grid-template-rows: auto auto;
    margin: 2px 5% 2px 5%;
}

.overview-item-text {
    user-select: none;
    pointer-events: none;
}

.overview-item-input {
    border-radius: var(--radius);
    border: none;
    outline: var(--border-width) solid
        var(--node-overview-item-input-background-color);
    backdrop-filter: var(--blur);
    background-color: var(--node-overview-item-input-background-color);
    width: 100%;
    margin: 0 auto;
}

.overview-delete-button {
    font-size: medium;
    height: var(--node-height);
    width: 70%;
    color: var(--node-overview-button-color);
    border-radius: var(--radius);
    margin: 20px auto;
    user-select: none;
    border: none;
    outline: var(--border-width) solid var(--node-overview-button-outline-color);
    background-color: var(--node-overview-button-background-color);
    cursor: pointer;
}

.overview-delete-button:hover {
    background-color: var(--node-overview-button-hover-background-color);
}

/* inherit node */

/* IO */
.Input {
    background-color: rgb(192, 128, 0);
}

.Output {
    background-color: rgb(0, 128, 192);
}

/* math (0, 128, x) */
.Add {
    background-color: rgb(0, 128, 96);
}

.Subtract {
    background-color: rgb(0, 128, 112);
}

.Multiply {
    background-color: rgb(0, 128, 128);
}

.Divide {
    background-color: rgb(0, 128, 144);
}

/* data (160, 64, x+8) */
.Rand {
    background-color: rgb(160, 64, 96);
}

.RandNormal {
    background-color: rgb(160, 64, 104);
}

.RandInt {
    background-color: rgb(160, 64, 112);
}

.Ones {
    background-color: rgb(160, 64, 120);
}

.Zeros {
    background-color: rgb(160, 64, 128);
}

.Full {
    background-color: rgb(160, 64, 136);
}

/* transform (160, 96, x+8) */
.Reshape {
    background-color: rgb(160, 96, 96);
}

.Flatten {
    background-color: rgb(160, 96, 104);
}

.Unflatten {
    background-color: rgb(160, 96, 112);
}

.Cat {
    background-color: rgb(160, 96, 120);
}

.Stack {
    background-color: rgb(160, 96, 128);
}

.Squeeze {
    background-color: rgb(160, 96, 136);
}

.Unsqueeze {
    background-color: rgb(160, 96, 144);
}

.Permute {
    background-color: rgb(160, 96, 152);
}

.Transpose {
    background-color: rgb(160, 96, 160);
}

.RandLike {
    background-color: rgb(160, 96, 168);
}

.RandNormalLike {
    background-color: rgb(160, 96, 176);
}

.RandIntLike {
    background-color: rgb(160, 96, 184);
}

.OnesLike {
    background-color: rgb(160, 96, 192);
}

.ZerosLike {
    background-color: rgb(160, 96, 200);
}

.FullLike {
    background-color: rgb(160, 96, 208);
}

/* activation (160, 128, x+8) */
.Dropout {
    background-color: rgb(160, 128, 96);
}

.Dropout1d {
    background-color: rgb(160, 128, 104);
}

.Dropout2d {
    background-color: rgb(160, 128, 112);
}

.Dropout3d {
    background-color: rgb(160, 128, 120);
}

.Identity {
    background-color: rgb(160, 128, 128);
}

.ReLU {
    background-color: rgb(160, 128, 136);
}

.LeakyReLU {
    background-color: rgb(160, 128, 144);
}

.SELU {
    background-color: rgb(160, 128, 152);
}

.CELU {
    background-color: rgb(160, 128, 160);
}

.Sigmoid {
    background-color: rgb(160, 128, 168);
}

.Softmax {
    background-color: rgb(160, 128, 176);
}

/* convolution (160, 144, x+8) */
.Conv1d {
    background-color: rgb(160, 144, 96);
}

.Conv2d {
    background-color: rgb(160, 144, 104);
}

.Conv3d {
    background-color: rgb(160, 144, 112);
}

.LazyConv1d {
    background-color: rgb(160, 144, 120);
}

.LazyConv2d {
    background-color: rgb(160, 144, 128);
}

.LazyConv3d {
    background-color: rgb(160, 144, 136);
}

.ConvTranspose1d {
    background-color: rgb(160, 144, 144);
}

.ConvTranspose2d {
    background-color: rgb(160, 144, 152);
}

.ConvTranspose3d {
    background-color: rgb(160, 144, 160);
}

.LazyConvTranspose1d {
    background-color: rgb(160, 144, 168);
}

.LazyConvTranspose2d {
    background-color: rgb(160, 144, 176);
}

.LazyConvTranspose3d {
    background-color: rgb(160, 144, 184);
}

/* pool (160, 160, x+16) */
.MaxPool1d {
    background-color: rgb(160, 160, 96);
}

.MaxPool2d {
    background-color: rgb(160, 160, 112);
}

.MaxPool3d {
    background-color: rgb(160, 160, 128);
}

.MaxUnpool1d {
    background-color: rgb(160, 160, 144);
}

.MaxUnpool2d {
    background-color: rgb(160, 160, 160);
}

.MaxUnpool3d {
    background-color: rgb(160, 160, 176);
}

/* linear (160, 176, x+16) */
.Linear {
    background-color: rgb(160, 176, 96);
}

.LayerLinear {
    background-color: rgb(160, 176, 112);
}

/* normalization (160, 192, x+16) */
.BatchNorm1d {
    background-color: rgb(160, 192, 96);
}

.BatchNorm2d {
    background-color: rgb(160, 192, 112);
}

.BatchNorm3d {
    background-color: rgb(160, 192, 128);
}

.GroupNorm {
    background-color: rgb(160, 192, 144);
}

.LayerNorm {
    background-color: rgb(160, 192, 160);
}
